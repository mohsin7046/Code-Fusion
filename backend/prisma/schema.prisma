generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid()) @map("_id")
  username            String
  email               String             @unique
  password            String
  confirmpassword     String
  isVerified          Boolean            @default(false)
  role                Role
  profilePicture      String?            @default("https://img.freepik.com/free-vector/blue-circle-with-white-user_78370-4707.jpg?t=st=1749699722~exp=1749703322~hmac=39f48a05e7eaabd3b0686036e2a2ede1e605a7bd97d5d7a20a1c7892d42b075d&w=2000")
  bio                 String?
  location            String?
  skills              String[]
  socialLinks         String[]
  company_name        String?
  company_description String?
  company_role        String?
  company_website     String?
  company_location    String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  EmailVerification   EmailVerification?
  PasswordReset       PasswordReset?
  job                Job[]
  onlineTests        OnlineTest[]
  behavioralInterview BehavioralInterview[]
  summary           Summary[]
  studentEmails     StudentEmails[]
}

model EmailVerification {
  id        String   @id @default(cuid()) @map("_id")
  userId    String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model PasswordReset {
  id       String   @id @default(cuid()) @map("_id")
  userId    String   @unique
  tokenHash     String
  used     Boolean     @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  CANDIDATE
  RECRUITER
}

model Job{
  id  String @id @default(cuid()) @map("_id")
  recruiterId String
  companyName String
  interviewRole String
  date DateTime
  time String
  description String
  hasOnlineTest Boolean?
  hasAIInterview Boolean?
  hasCodingTest Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields : [recruiterId], references: [id], onDelete: Cascade)
  applications JobApplication[] 
  onlineTests OnlineTest[]
  behavioralInterviews BehavioralInterview[]
  summary Summary[]
  studentEmails StudentEmails[]
 }

 model  JobApplication {
  id          String   @id @default(cuid()) @map("_id")
  jobId       String
  candidateId String
  status      JobApplicationStatus @default(APPLIED) 
  currentPhase TestPhase
  onlineTestCompleted Boolean @default(false)
  aiInterviewCompleted Boolean @default(false)
  codingTestCompleted Boolean @default(false)
  finalFeedback String?
  hired Boolean @default(false)
  appliedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
 }

 model OnlineTest{
  id          String   @id @default(cuid()) @map("_id")
  jobId String
  recruiterId String 
  title       String
  description String
  password   String
  duration   Int
  totalQuestions Int
  passingScore Int
  subjects Subject[]
  questions   OnlineTestQuestion[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  summary Summary[]
  studentEmails StudentEmails[]
 }


model OnlineTestQuestion {
  id          String   @id @default(cuid()) @map("_id")
  onlineTestId String
  question    String
  options     String[]
  correctAnswer Int
  subject      String
  difficulty    DifficultyLevel @default(EASY)
  points      Int @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  onlineTest  OnlineTest @relation(fields: [onlineTestId], references: [id], onDelete: Cascade)
 }

 model Subject{
  id          String   @id @default(cuid()) @map("_id")
  testId      String
  name        String
  easyQuestions Int
  mediumQuestions Int
  hardQuestions Int
  totalQuestions Int
  onlineTest OnlineTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
 }

 model BehavioralInterview {
  id  String @id @default(cuid()) @map("_id")
  jobId String
  recruiterId String
  totalQuestions Int
  questions  BehavioralInterviewQuestion[]
  duration Int
  passingScore Int
  OverallFeedback String?
  keyWords    Keyword[]
  evaluationCriteria String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  summary Summary[]
  studentEmails StudentEmails[]
 }
 
model Keyword{
  id         String   @id @default(cuid()) @map("_id")
  behavioralInterviewId String
  name      String
  subKeywords String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  behavioralInterview BehavioralInterview @relation(fields: [behavioralInterviewId], references: [id], onDelete: Cascade)
 }

model BehavioralInterviewQuestion {
  id          String   @id @default(cuid()) @map("_id")
  behavioralInterviewId String
  question    String
  subject      String
  difficulty    DifficultyLevel @default(EASY)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  behavioralInterview BehavioralInterview @relation(fields: [behavioralInterviewId], references: [id], onDelete: Cascade)
 }


model Summary{
  id          String   @id @default(cuid()) @map("_id")
  jobId       String
  recruiterId String
  onlineTestId String?
  behavioralInterviewId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  onlineTest  OnlineTest? @relation(fields: [onlineTestId], references: [id], onDelete: Cascade)
  behavioralInterview BehavioralInterview? @relation(fields: [behavioralInterviewId], references: [id], onDelete: Cascade)

}


model StudentEmails {
  id        String   @id @default(cuid()) @map("_id")
  jobId     String
  recruiterId String
  onlineTestId String?
  behavioralInterviewId String?
  password String
  emails     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  onlineTest OnlineTest? @relation(fields: [onlineTestId], references: [id], onDelete: Cascade)
  behavioralInterview BehavioralInterview? @relation(fields: [behavioralInterviewId], references: [id], onDelete: Cascade)
}


 enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

 enum JobApplicationStatus {
  APPLIED
  ONLINE_TEST_PENDING
  ONLINE_TEST_COMPLETED
  AI_INTERVIEW_PENDING
  AI_INTERVIEW_COMPLETED
  CODING_TEST_PENDING
  CODING_TEST_COMPLETED
  UNDER_REVIEW
  SELECTED
  REJECTED
  HIRED
 }

 enum TestPhase {
  ONLINE_TEST
  AI_INTERVIEW
  CODING_TEST
}


model VideoCall {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  callerId   String
  receiverId String
  startTime  DateTime  @default(now())
  endTime    DateTime?
  status     String // 'initiated', 'accepted', 'ended'
}

model Room {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String   @unique
  host      String
  members   String[]
  createdAt DateTime @default(now())
}
